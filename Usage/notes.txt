1st nmap scan:
PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 a0:f8:fd:d3:04:b8:07:a0:63:dd:37:df:d7:ee:ca:78 (ECDSA)
|_  256 bd:22:f5:28:77:27:fb:65:ba:f6:fd:2f:10:c7:82:8f (ED25519)
80/tcp    open     http    nginx 1.18.0 (Ubuntu)
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://usage.htb/
52848/tcp filtered unknown
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.02 seconds


Navigating to the site, I'm prompted with a page asking for an email/pass to login.  Wappalyzer is indicating this is a Laravel site, with Nginx running on Ubuntu.  There is a password reset link which may be useful in the future.  Also worth noting, an Admin subdomain is referenced, I'll try brute-forcing others now.

a Gobuster on the admin subdomain didn't really find any additional pages, aside from these two:
/uploads              (Status: 301) [Size: 178] [--> http://admin.usage.htb/uploads/]                                                                 
/admin                (Status: 302) [Size: 402] [--> http://admin.usage.htb/admin/auth/login] 

Registering an account doesn't appear to lead to anything interesting, just a page for a blog, but it's just a static page.  Default admin/admin creds for laravel dont work either.  The subdomain brute force didnt result in any additional domains being leaked, however, I may try another list.  

Two cookies are set upon our login, a laravel_session cookie and xsrf_token.  Oddly, I am getting an HTTP 419 when trying to authenticate to the admin portal, which per a quick Google search indicates that my session may be timing out?  From this, it sounds like it's likely from the csrf tokens: https://stackoverflow.com/questions/46266553/why-does-the-laravel-api-return-a-419-status-code-on-post-and-put-methods

I moved to testing the reset password page, which appears to be sql injectable as it returns a 500 when you add a '.  Running this: sqlmap -r req.txt --level=3 --risk=3 I did return a note that SQLMAP detected the backend db as MySQL, but further testing was stopped due to the server returning a bunch of 500 error codes.
